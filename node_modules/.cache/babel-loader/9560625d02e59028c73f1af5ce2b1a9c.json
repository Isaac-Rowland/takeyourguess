{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst HotModuleReplacementPlugin = require(\"../HotModuleReplacementPlugin\");\n\nconst InnerGraph = require(\"../optimize/InnerGraph\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst HarmonyAcceptDependency = require(\"./HarmonyAcceptDependency\");\n\nconst HarmonyAcceptImportDependency = require(\"./HarmonyAcceptImportDependency\");\n\nconst HarmonyEvaluatedImportSpecifierDependency = require(\"./HarmonyEvaluatedImportSpecifierDependency\");\n\nconst HarmonyExports = require(\"./HarmonyExports\");\n\nconst {\n  ExportPresenceModes\n} = require(\"./HarmonyImportDependency\");\n\nconst HarmonyImportSideEffectDependency = require(\"./HarmonyImportSideEffectDependency\");\n\nconst HarmonyImportSpecifierDependency = require(\"./HarmonyImportSpecifierDependency\");\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclaration */\n\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclaration */\n\n/** @typedef {import(\"estree\").Identifier} Identifier */\n\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclaration */\n\n/** @typedef {import(\"estree\").ImportExpression} ImportExpression */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n\n/** @typedef {import(\"../optimize/InnerGraph\").InnerGraph} InnerGraph */\n\n/** @typedef {import(\"../optimize/InnerGraph\").TopLevelSymbol} TopLevelSymbol */\n\n/** @typedef {import(\"./HarmonyImportDependency\")} HarmonyImportDependency */\n\n\nconst harmonySpecifierTag = Symbol(\"harmony import\");\n/**\n * @typedef {Object} HarmonySettings\n * @property {string[]} ids\n * @property {string} source\n * @property {number} sourceOrder\n * @property {string} name\n * @property {boolean} await\n * @property {Record<string, any> | undefined} assertions\n */\n\n/**\n * @param {ImportDeclaration | ExportNamedDeclaration | ExportAllDeclaration | ImportExpression} node node with assertions\n * @returns {Record<string, any> | undefined} assertions\n */\n\nfunction getAssertions(node) {\n  // TODO remove cast when @types/estree has been updated to import assertions\n  const assertions =\n  /** @type {{ assertions?: ImportAttributeNode[] }} */\n  node.assertions;\n\n  if (assertions === undefined) {\n    return undefined;\n  }\n\n  const result = {};\n\n  for (const assertion of assertions) {\n    const key = assertion.key.type === \"Identifier\" ? assertion.key.name : assertion.key.value;\n    result[key] = assertion.value.value;\n  }\n\n  return result;\n}\n\nmodule.exports = class HarmonyImportDependencyParserPlugin {\n  /**\n   * @param {JavascriptParserOptions} options options\n   */\n  constructor(options) {\n    this.exportPresenceMode = options.importExportsPresence !== undefined ? ExportPresenceModes.fromUserOption(options.importExportsPresence) : options.exportsPresence !== undefined ? ExportPresenceModes.fromUserOption(options.exportsPresence) : options.strictExportPresence ? ExportPresenceModes.ERROR : ExportPresenceModes.AUTO;\n    this.strictThisContextOnImports = options.strictThisContextOnImports;\n  }\n  /**\n   * @param {JavascriptParser} parser the parser\n   * @returns {void}\n   */\n\n\n  apply(parser) {\n    const {\n      exportPresenceMode\n    } = this;\n\n    function getNonOptionalPart(members, membersOptionals) {\n      let i = 0;\n\n      while (i < members.length && membersOptionals[i] === false) i++;\n\n      return i !== members.length ? members.slice(0, i) : members;\n    }\n\n    function getNonOptionalMemberChain(node, count) {\n      while (count--) node = node.object;\n\n      return node;\n    }\n\n    parser.hooks.isPure.for(\"Identifier\").tap(\"HarmonyImportDependencyParserPlugin\", expression => {\n      const expr =\n      /** @type {Identifier} */\n      expression;\n\n      if (parser.isVariableDefined(expr.name) || parser.getTagData(expr.name, harmonySpecifierTag)) {\n        return true;\n      }\n    });\n    parser.hooks.import.tap(\"HarmonyImportDependencyParserPlugin\", (statement, source) => {\n      parser.state.lastHarmonyImportOrder = (parser.state.lastHarmonyImportOrder || 0) + 1;\n      const clearDep = new ConstDependency(parser.isAsiPosition(statement.range[0]) ? \";\" : \"\", statement.range);\n      clearDep.loc = statement.loc;\n      parser.state.module.addPresentationalDependency(clearDep);\n      parser.unsetAsiPosition(statement.range[1]);\n      const assertions = getAssertions(statement);\n      const sideEffectDep = new HarmonyImportSideEffectDependency(source, parser.state.lastHarmonyImportOrder, assertions);\n      sideEffectDep.loc = statement.loc;\n      parser.state.module.addDependency(sideEffectDep);\n      return true;\n    });\n    parser.hooks.importSpecifier.tap(\"HarmonyImportDependencyParserPlugin\", (statement, source, id, name) => {\n      const ids = id === null ? [] : [id];\n      parser.tagVariable(name, harmonySpecifierTag, {\n        name,\n        source,\n        ids,\n        sourceOrder: parser.state.lastHarmonyImportOrder,\n        assertions: getAssertions(statement)\n      });\n      return true;\n    });\n    parser.hooks.binaryExpression.tap(\"HarmonyImportDependencyParserPlugin\", expression => {\n      if (expression.operator !== \"in\") return;\n      const leftPartEvaluated = parser.evaluateExpression(expression.left);\n      if (leftPartEvaluated.couldHaveSideEffects()) return;\n      const leftPart = leftPartEvaluated.asString();\n      if (!leftPart) return;\n      const rightPart = parser.evaluateExpression(expression.right);\n      if (!rightPart.isIdentifier()) return;\n      const rootInfo = rightPart.rootInfo;\n      if (!rootInfo || !rootInfo.tagInfo || rootInfo.tagInfo.tag !== harmonySpecifierTag) return;\n      const settings = rootInfo.tagInfo.data;\n      const members = rightPart.getMembers();\n      const dep = new HarmonyEvaluatedImportSpecifierDependency(settings.source, settings.sourceOrder, settings.ids.concat(members).concat([leftPart]), settings.name, expression.range, settings.assertions, \"in\");\n      dep.directImport = members.length === 0;\n      dep.asiSafe = !parser.isAsiPosition(expression.range[0]);\n      dep.loc = expression.loc;\n      parser.state.module.addDependency(dep);\n      InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n      return true;\n    });\n    parser.hooks.expression.for(harmonySpecifierTag).tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n      const settings =\n      /** @type {HarmonySettings} */\n      parser.currentTagData;\n      const dep = new HarmonyImportSpecifierDependency(settings.source, settings.sourceOrder, settings.ids, settings.name, expr.range, exportPresenceMode, settings.assertions);\n      dep.shorthand = parser.scope.inShorthand;\n      dep.directImport = true;\n      dep.asiSafe = !parser.isAsiPosition(expr.range[0]);\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n      return true;\n    });\n    parser.hooks.expressionMemberChain.for(harmonySpecifierTag).tap(\"HarmonyImportDependencyParserPlugin\", (expression, members, membersOptionals) => {\n      const settings =\n      /** @type {HarmonySettings} */\n      parser.currentTagData;\n      const nonOptionalMembers = getNonOptionalPart(members, membersOptionals);\n      const expr = nonOptionalMembers !== members ? getNonOptionalMemberChain(expression, members.length - nonOptionalMembers.length) : expression;\n      const ids = settings.ids.concat(nonOptionalMembers);\n      const dep = new HarmonyImportSpecifierDependency(settings.source, settings.sourceOrder, ids, settings.name, expr.range, exportPresenceMode, settings.assertions);\n      dep.asiSafe = !parser.isAsiPosition(expr.range[0]);\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n      return true;\n    });\n    parser.hooks.callMemberChain.for(harmonySpecifierTag).tap(\"HarmonyImportDependencyParserPlugin\", (expression, members, membersOptionals) => {\n      const {\n        arguments: args,\n        callee\n      } = expression;\n      const settings =\n      /** @type {HarmonySettings} */\n      parser.currentTagData;\n      const nonOptionalMembers = getNonOptionalPart(members, membersOptionals);\n      const expr = nonOptionalMembers !== members ? getNonOptionalMemberChain(callee, members.length - nonOptionalMembers.length) : callee;\n      const ids = settings.ids.concat(nonOptionalMembers);\n      const dep = new HarmonyImportSpecifierDependency(settings.source, settings.sourceOrder, ids, settings.name, expr.range, exportPresenceMode, settings.assertions);\n      dep.directImport = members.length === 0;\n      dep.call = true;\n      dep.asiSafe = !parser.isAsiPosition(expr.range[0]); // only in case when we strictly follow the spec we need a special case here\n\n      dep.namespaceObjectAsContext = members.length > 0 && this.strictThisContextOnImports;\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      if (args) parser.walkExpressions(args);\n      InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n      return true;\n    });\n    const {\n      hotAcceptCallback,\n      hotAcceptWithoutCallback\n    } = HotModuleReplacementPlugin.getParserHooks(parser);\n    hotAcceptCallback.tap(\"HarmonyImportDependencyParserPlugin\", (expr, requests) => {\n      if (!HarmonyExports.isEnabled(parser.state)) {\n        // This is not a harmony module, skip it\n        return;\n      }\n\n      const dependencies = requests.map(request => {\n        const dep = new HarmonyAcceptImportDependency(request);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n        return dep;\n      });\n\n      if (dependencies.length > 0) {\n        const dep = new HarmonyAcceptDependency(expr.range, dependencies, true);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n      }\n    });\n    hotAcceptWithoutCallback.tap(\"HarmonyImportDependencyParserPlugin\", (expr, requests) => {\n      if (!HarmonyExports.isEnabled(parser.state)) {\n        // This is not a harmony module, skip it\n        return;\n      }\n\n      const dependencies = requests.map(request => {\n        const dep = new HarmonyAcceptImportDependency(request);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n        return dep;\n      });\n\n      if (dependencies.length > 0) {\n        const dep = new HarmonyAcceptDependency(expr.range, dependencies, false);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n      }\n    });\n  }\n\n};\nmodule.exports.harmonySpecifierTag = harmonySpecifierTag;\nmodule.exports.getAssertions = getAssertions;","map":{"version":3,"sources":["/Users/isaacrowland/sei/project4/takeyourguess/node_modules/webpack/lib/dependencies/HarmonyImportDependencyParserPlugin.js"],"names":["HotModuleReplacementPlugin","require","InnerGraph","ConstDependency","HarmonyAcceptDependency","HarmonyAcceptImportDependency","HarmonyEvaluatedImportSpecifierDependency","HarmonyExports","ExportPresenceModes","HarmonyImportSideEffectDependency","HarmonyImportSpecifierDependency","harmonySpecifierTag","Symbol","getAssertions","node","assertions","undefined","result","assertion","key","type","name","value","module","exports","HarmonyImportDependencyParserPlugin","constructor","options","exportPresenceMode","importExportsPresence","fromUserOption","exportsPresence","strictExportPresence","ERROR","AUTO","strictThisContextOnImports","apply","parser","getNonOptionalPart","members","membersOptionals","i","length","slice","getNonOptionalMemberChain","count","object","hooks","isPure","for","tap","expression","expr","isVariableDefined","getTagData","import","statement","source","state","lastHarmonyImportOrder","clearDep","isAsiPosition","range","loc","addPresentationalDependency","unsetAsiPosition","sideEffectDep","addDependency","importSpecifier","id","ids","tagVariable","sourceOrder","binaryExpression","operator","leftPartEvaluated","evaluateExpression","left","couldHaveSideEffects","leftPart","asString","rightPart","right","isIdentifier","rootInfo","tagInfo","tag","settings","data","getMembers","dep","concat","directImport","asiSafe","onUsage","e","usedByExports","currentTagData","shorthand","scope","inShorthand","expressionMemberChain","nonOptionalMembers","callMemberChain","arguments","args","callee","call","namespaceObjectAsContext","walkExpressions","hotAcceptCallback","hotAcceptWithoutCallback","getParserHooks","requests","isEnabled","dependencies","map","request"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst HotModuleReplacementPlugin = require(\"../HotModuleReplacementPlugin\");\nconst InnerGraph = require(\"../optimize/InnerGraph\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst HarmonyAcceptDependency = require(\"./HarmonyAcceptDependency\");\nconst HarmonyAcceptImportDependency = require(\"./HarmonyAcceptImportDependency\");\nconst HarmonyEvaluatedImportSpecifierDependency = require(\"./HarmonyEvaluatedImportSpecifierDependency\");\nconst HarmonyExports = require(\"./HarmonyExports\");\nconst { ExportPresenceModes } = require(\"./HarmonyImportDependency\");\nconst HarmonyImportSideEffectDependency = require(\"./HarmonyImportSideEffectDependency\");\nconst HarmonyImportSpecifierDependency = require(\"./HarmonyImportSpecifierDependency\");\n\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclaration */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclaration */\n/** @typedef {import(\"estree\").Identifier} Identifier */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclaration */\n/** @typedef {import(\"estree\").ImportExpression} ImportExpression */\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"../optimize/InnerGraph\").InnerGraph} InnerGraph */\n/** @typedef {import(\"../optimize/InnerGraph\").TopLevelSymbol} TopLevelSymbol */\n/** @typedef {import(\"./HarmonyImportDependency\")} HarmonyImportDependency */\n\nconst harmonySpecifierTag = Symbol(\"harmony import\");\n\n/**\n * @typedef {Object} HarmonySettings\n * @property {string[]} ids\n * @property {string} source\n * @property {number} sourceOrder\n * @property {string} name\n * @property {boolean} await\n * @property {Record<string, any> | undefined} assertions\n */\n\n/**\n * @param {ImportDeclaration | ExportNamedDeclaration | ExportAllDeclaration | ImportExpression} node node with assertions\n * @returns {Record<string, any> | undefined} assertions\n */\nfunction getAssertions(node) {\n\t// TODO remove cast when @types/estree has been updated to import assertions\n\tconst assertions = /** @type {{ assertions?: ImportAttributeNode[] }} */ (\n\t\tnode\n\t).assertions;\n\tif (assertions === undefined) {\n\t\treturn undefined;\n\t}\n\tconst result = {};\n\tfor (const assertion of assertions) {\n\t\tconst key =\n\t\t\tassertion.key.type === \"Identifier\"\n\t\t\t\t? assertion.key.name\n\t\t\t\t: assertion.key.value;\n\t\tresult[key] = assertion.value.value;\n\t}\n\treturn result;\n}\n\nmodule.exports = class HarmonyImportDependencyParserPlugin {\n\t/**\n\t * @param {JavascriptParserOptions} options options\n\t */\n\tconstructor(options) {\n\t\tthis.exportPresenceMode =\n\t\t\toptions.importExportsPresence !== undefined\n\t\t\t\t? ExportPresenceModes.fromUserOption(options.importExportsPresence)\n\t\t\t\t: options.exportsPresence !== undefined\n\t\t\t\t? ExportPresenceModes.fromUserOption(options.exportsPresence)\n\t\t\t\t: options.strictExportPresence\n\t\t\t\t? ExportPresenceModes.ERROR\n\t\t\t\t: ExportPresenceModes.AUTO;\n\t\tthis.strictThisContextOnImports = options.strictThisContextOnImports;\n\t}\n\n\t/**\n\t * @param {JavascriptParser} parser the parser\n\t * @returns {void}\n\t */\n\tapply(parser) {\n\t\tconst { exportPresenceMode } = this;\n\n\t\tfunction getNonOptionalPart(members, membersOptionals) {\n\t\t\tlet i = 0;\n\t\t\twhile (i < members.length && membersOptionals[i] === false) i++;\n\t\t\treturn i !== members.length ? members.slice(0, i) : members;\n\t\t}\n\n\t\tfunction getNonOptionalMemberChain(node, count) {\n\t\t\twhile (count--) node = node.object;\n\t\t\treturn node;\n\t\t}\n\n\t\tparser.hooks.isPure\n\t\t\t.for(\"Identifier\")\n\t\t\t.tap(\"HarmonyImportDependencyParserPlugin\", expression => {\n\t\t\t\tconst expr = /** @type {Identifier} */ (expression);\n\t\t\t\tif (\n\t\t\t\t\tparser.isVariableDefined(expr.name) ||\n\t\t\t\t\tparser.getTagData(expr.name, harmonySpecifierTag)\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\tparser.hooks.import.tap(\n\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t(statement, source) => {\n\t\t\t\tparser.state.lastHarmonyImportOrder =\n\t\t\t\t\t(parser.state.lastHarmonyImportOrder || 0) + 1;\n\t\t\t\tconst clearDep = new ConstDependency(\n\t\t\t\t\tparser.isAsiPosition(statement.range[0]) ? \";\" : \"\",\n\t\t\t\t\tstatement.range\n\t\t\t\t);\n\t\t\t\tclearDep.loc = statement.loc;\n\t\t\t\tparser.state.module.addPresentationalDependency(clearDep);\n\t\t\t\tparser.unsetAsiPosition(statement.range[1]);\n\t\t\t\tconst assertions = getAssertions(statement);\n\t\t\t\tconst sideEffectDep = new HarmonyImportSideEffectDependency(\n\t\t\t\t\tsource,\n\t\t\t\t\tparser.state.lastHarmonyImportOrder,\n\t\t\t\t\tassertions\n\t\t\t\t);\n\t\t\t\tsideEffectDep.loc = statement.loc;\n\t\t\t\tparser.state.module.addDependency(sideEffectDep);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t);\n\t\tparser.hooks.importSpecifier.tap(\n\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t(statement, source, id, name) => {\n\t\t\t\tconst ids = id === null ? [] : [id];\n\t\t\t\tparser.tagVariable(name, harmonySpecifierTag, {\n\t\t\t\t\tname,\n\t\t\t\t\tsource,\n\t\t\t\t\tids,\n\t\t\t\t\tsourceOrder: parser.state.lastHarmonyImportOrder,\n\t\t\t\t\tassertions: getAssertions(statement)\n\t\t\t\t});\n\t\t\t\treturn true;\n\t\t\t}\n\t\t);\n\t\tparser.hooks.binaryExpression.tap(\n\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\texpression => {\n\t\t\t\tif (expression.operator !== \"in\") return;\n\n\t\t\t\tconst leftPartEvaluated = parser.evaluateExpression(expression.left);\n\t\t\t\tif (leftPartEvaluated.couldHaveSideEffects()) return;\n\t\t\t\tconst leftPart = leftPartEvaluated.asString();\n\t\t\t\tif (!leftPart) return;\n\n\t\t\t\tconst rightPart = parser.evaluateExpression(expression.right);\n\t\t\t\tif (!rightPart.isIdentifier()) return;\n\n\t\t\t\tconst rootInfo = rightPart.rootInfo;\n\t\t\t\tif (\n\t\t\t\t\t!rootInfo ||\n\t\t\t\t\t!rootInfo.tagInfo ||\n\t\t\t\t\trootInfo.tagInfo.tag !== harmonySpecifierTag\n\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\tconst settings = rootInfo.tagInfo.data;\n\t\t\t\tconst members = rightPart.getMembers();\n\t\t\t\tconst dep = new HarmonyEvaluatedImportSpecifierDependency(\n\t\t\t\t\tsettings.source,\n\t\t\t\t\tsettings.sourceOrder,\n\t\t\t\t\tsettings.ids.concat(members).concat([leftPart]),\n\t\t\t\t\tsettings.name,\n\t\t\t\t\texpression.range,\n\t\t\t\t\tsettings.assertions,\n\t\t\t\t\t\"in\"\n\t\t\t\t);\n\t\t\t\tdep.directImport = members.length === 0;\n\t\t\t\tdep.asiSafe = !parser.isAsiPosition(expression.range[0]);\n\t\t\t\tdep.loc = expression.loc;\n\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t);\n\t\tparser.hooks.expression\n\t\t\t.for(harmonySpecifierTag)\n\t\t\t.tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n\t\t\t\tconst settings = /** @type {HarmonySettings} */ (parser.currentTagData);\n\t\t\t\tconst dep = new HarmonyImportSpecifierDependency(\n\t\t\t\t\tsettings.source,\n\t\t\t\t\tsettings.sourceOrder,\n\t\t\t\t\tsettings.ids,\n\t\t\t\t\tsettings.name,\n\t\t\t\t\texpr.range,\n\t\t\t\t\texportPresenceMode,\n\t\t\t\t\tsettings.assertions\n\t\t\t\t);\n\t\t\t\tdep.shorthand = parser.scope.inShorthand;\n\t\t\t\tdep.directImport = true;\n\t\t\t\tdep.asiSafe = !parser.isAsiPosition(expr.range[0]);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\n\t\t\t\treturn true;\n\t\t\t});\n\t\tparser.hooks.expressionMemberChain\n\t\t\t.for(harmonySpecifierTag)\n\t\t\t.tap(\n\t\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t\t(expression, members, membersOptionals) => {\n\t\t\t\t\tconst settings = /** @type {HarmonySettings} */ (\n\t\t\t\t\t\tparser.currentTagData\n\t\t\t\t\t);\n\t\t\t\t\tconst nonOptionalMembers = getNonOptionalPart(\n\t\t\t\t\t\tmembers,\n\t\t\t\t\t\tmembersOptionals\n\t\t\t\t\t);\n\t\t\t\t\tconst expr =\n\t\t\t\t\t\tnonOptionalMembers !== members\n\t\t\t\t\t\t\t? getNonOptionalMemberChain(\n\t\t\t\t\t\t\t\t\texpression,\n\t\t\t\t\t\t\t\t\tmembers.length - nonOptionalMembers.length\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: expression;\n\t\t\t\t\tconst ids = settings.ids.concat(nonOptionalMembers);\n\t\t\t\t\tconst dep = new HarmonyImportSpecifierDependency(\n\t\t\t\t\t\tsettings.source,\n\t\t\t\t\t\tsettings.sourceOrder,\n\t\t\t\t\t\tids,\n\t\t\t\t\t\tsettings.name,\n\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\texportPresenceMode,\n\t\t\t\t\t\tsettings.assertions\n\t\t\t\t\t);\n\t\t\t\t\tdep.asiSafe = !parser.isAsiPosition(expr.range[0]);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\tparser.hooks.callMemberChain\n\t\t\t.for(harmonySpecifierTag)\n\t\t\t.tap(\n\t\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t\t(expression, members, membersOptionals) => {\n\t\t\t\t\tconst { arguments: args, callee } = expression;\n\t\t\t\t\tconst settings = /** @type {HarmonySettings} */ (\n\t\t\t\t\t\tparser.currentTagData\n\t\t\t\t\t);\n\t\t\t\t\tconst nonOptionalMembers = getNonOptionalPart(\n\t\t\t\t\t\tmembers,\n\t\t\t\t\t\tmembersOptionals\n\t\t\t\t\t);\n\t\t\t\t\tconst expr =\n\t\t\t\t\t\tnonOptionalMembers !== members\n\t\t\t\t\t\t\t? getNonOptionalMemberChain(\n\t\t\t\t\t\t\t\t\tcallee,\n\t\t\t\t\t\t\t\t\tmembers.length - nonOptionalMembers.length\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: callee;\n\t\t\t\t\tconst ids = settings.ids.concat(nonOptionalMembers);\n\t\t\t\t\tconst dep = new HarmonyImportSpecifierDependency(\n\t\t\t\t\t\tsettings.source,\n\t\t\t\t\t\tsettings.sourceOrder,\n\t\t\t\t\t\tids,\n\t\t\t\t\t\tsettings.name,\n\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\texportPresenceMode,\n\t\t\t\t\t\tsettings.assertions\n\t\t\t\t\t);\n\t\t\t\t\tdep.directImport = members.length === 0;\n\t\t\t\t\tdep.call = true;\n\t\t\t\t\tdep.asiSafe = !parser.isAsiPosition(expr.range[0]);\n\t\t\t\t\t// only in case when we strictly follow the spec we need a special case here\n\t\t\t\t\tdep.namespaceObjectAsContext =\n\t\t\t\t\t\tmembers.length > 0 && this.strictThisContextOnImports;\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\tif (args) parser.walkExpressions(args);\n\t\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\tconst { hotAcceptCallback, hotAcceptWithoutCallback } =\n\t\t\tHotModuleReplacementPlugin.getParserHooks(parser);\n\t\thotAcceptCallback.tap(\n\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t(expr, requests) => {\n\t\t\t\tif (!HarmonyExports.isEnabled(parser.state)) {\n\t\t\t\t\t// This is not a harmony module, skip it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst dependencies = requests.map(request => {\n\t\t\t\t\tconst dep = new HarmonyAcceptImportDependency(request);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\treturn dep;\n\t\t\t\t});\n\t\t\t\tif (dependencies.length > 0) {\n\t\t\t\t\tconst dep = new HarmonyAcceptDependency(\n\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\tdependencies,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\thotAcceptWithoutCallback.tap(\n\t\t\t\"HarmonyImportDependencyParserPlugin\",\n\t\t\t(expr, requests) => {\n\t\t\t\tif (!HarmonyExports.isEnabled(parser.state)) {\n\t\t\t\t\t// This is not a harmony module, skip it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst dependencies = requests.map(request => {\n\t\t\t\t\tconst dep = new HarmonyAcceptImportDependency(request);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t\treturn dep;\n\t\t\t\t});\n\t\t\t\tif (dependencies.length > 0) {\n\t\t\t\t\tconst dep = new HarmonyAcceptDependency(\n\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\tdependencies,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.module.addDependency(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n};\n\nmodule.exports.harmonySpecifierTag = harmonySpecifierTag;\nmodule.exports.getAssertions = getAssertions;\n"]},"metadata":{},"sourceType":"script"}